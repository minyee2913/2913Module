"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bdsx_1 = require("bdsx");
const command_1 = require("bdsx/bds/command");
const event_1 = require("bdsx/event");
const nativetype_1 = require("bdsx/nativetype");
const colors_1 = require("colors");
const fs_1 = require("fs");
const __1 = require("..");
const packets_1 = require("../packets");
bdsx_1.ipfilter.setTrafficLimit(1000000);
bdsx_1.ipfilter.setTrafficLimitPeriod(10 * 60);
///////////////////////////////////////////////////////////////////////
let config = {
    LocalData: './ban.json',
    Ban_command: 'ban_',
    IpBan_command: 'ipban_',
    UnBan_command: 'unban_',
    Ban_msg: '§cYou are BANNED',
    IpBan_msg: '§cYou are Ip BANNED',
    UnBan_msg: '§a${target} is UNBANNED',
    announce: '§e${target} was BANNED By ${origin}'
};
//////////////////////////////////////////////////////////////////////
fs_1.open(config.LocalData, 'a+', function (err, fd) {
    if (err)
        throw err;
    try {
        JSON.parse(fs_1.readFileSync(config.LocalData, "utf8"));
    }
    catch (err) {
        fs_1.writeFileSync(config.LocalData, '{ "IpBan": [{"ip": "","name":""}], "NameBan": [] }', "utf8");
    }
});
bdsx_1.command.register(config.Ban_command, "ban Command", command_1.CommandPermissionLevel.Operator).overload((p, o, ut) => {
    let targets = [];
    for (const actor of p.player.newResults(o)) {
        if (!actor.isPlayer()) {
            packets_1.sendText(o.getName(), '§c§lOnly Player!!!');
            return;
        }
        targets.push(actor);
    }
    if (targets.length > 1) {
        packets_1.sendText(o.getName(), '§c§lOnly 1 Player!!!');
        return;
    }
    let target = targets[0].getNetworkIdentifier();
    let targetName = __1.NameById(target);
    console.log(`${targetName} banned`);
    bdsx_1.bedrockServer.executeCommand(`tellraw @a {"rawtext":[{"text":"${config.announce.replace('${target}', `${targetName}`).replace('${origin}', `${o.getName()}`)}"}]}`);
    const BanJS = JSON.parse(fs_1.readFileSync(config.LocalData, "utf8"));
    BanJS.NameBan.push(targetName);
    fs_1.writeFileSync(config.LocalData, JSON.stringify(BanJS, null, 4), "utf8");
    if (__1.playerList.includes(o.getName()))
        __1.Disconnect(target, config.Ban_msg);
}, { player: command_1.ActorWildcardCommandSelector });
bdsx_1.command.register(config.IpBan_command, "Ipban Command", command_1.CommandPermissionLevel.Operator).overload((p, o, ut) => {
    let targets = [];
    for (const actor of p.player.newResults(o)) {
        if (!actor.isPlayer()) {
            packets_1.sendText(o.getName(), '§c§lOnly Player!!!');
            return;
        }
        targets.push(actor);
    }
    if (targets.length > 1) {
        packets_1.sendText(o.getName(), '§c§lOnly 1 Player!!!');
        return;
    }
    let target = targets[0].getNetworkIdentifier();
    let targetName = __1.NameById(target);
    let [ip, port] = target.getAddress().split('|');
    let js = {
        ip: ip,
        name: targetName
    };
    console.log(`${o.getName()} Ip banned ${targetName}\nip : ${ip} port : ${port}`);
    bdsx_1.bedrockServer.executeCommand(`tellraw @a {"rawtext":[{"text":"${config.announce.replace('${target}', `${targetName}`).replace('${origin}', `${o.getName()}`)}"}]}`);
    const BanJS = JSON.parse(fs_1.readFileSync(config.LocalData, "utf8"));
    BanJS.IpBan.push(js);
    fs_1.writeFileSync(config.LocalData, JSON.stringify(BanJS), "utf8");
    __1.Disconnect(target, config.IpBan_msg);
}, { player: command_1.ActorWildcardCommandSelector });
bdsx_1.command.register(config.UnBan_command, "Unban Command", command_1.CommandPermissionLevel.Operator).overload((p, o, ut) => {
    let targetName = p.targetName;
    console.log(`${o.getName()} Unbanned ${targetName}`);
    bdsx_1.bedrockServer.executeCommand(`tellraw @p[name="${o.getName()}"] {"rawtext":[{"text":"${config.UnBan_msg.replace('${target}', `${targetName}`).replace('${origin}', `${o.getName()}`)}"}]}`);
    const BanJS = JSON.parse(fs_1.readFileSync(config.LocalData, "utf8"));
    let Nstate = BanJS.NameBan.indexOf(targetName);
    BanJS.NameBan.splice(Nstate, 1);
    let Ijs = BanJS.IpBan.map((e, i) => e.name);
    let Istate = Ijs.indexOf(targetName);
    BanJS.IpBan.splice(Istate, 1);
    fs_1.writeFileSync(config.LocalData, JSON.stringify(BanJS, null, 4), "utf8");
}, { targetName: nativetype_1.CxxString });
event_1.events.packetAfter(bdsx_1.MinecraftPacketIds.Login).on((ptr, networkidentifier, packetId) => {
    let target = String(networkidentifier);
    let targetName = __1.NameById(networkidentifier);
    let [ip, port] = target.split('|');
    const BanJS = JSON.parse(fs_1.readFileSync(config.LocalData, "utf8"));
    let Ijs = BanJS.IpBan.map((e, i) => e.ip);
    setTimeout(function () {
        if (BanJS.NameBan.includes(targetName))
            __1.Disconnect(networkidentifier, config.Ban_msg);
        if (Ijs.includes(ip))
            __1.Disconnect(networkidentifier, config.IpBan_msg);
    }, 3000);
});
console.log(colors_1.yellow('*') + colors_1.white(' ban'));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXNHO0FBQ3RHLDhDQUF3RjtBQUN4RixzQ0FBb0M7QUFDcEMsZ0RBQTRDO0FBQzVDLG1DQUE4QztBQUM5QywyQkFBdUQ7QUFDdkQsMEJBQWtGO0FBQ2xGLHdDQUFzQztBQUN0QyxlQUFRLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xDLGVBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsdUVBQXVFO0FBRXZFLElBQUksTUFBTSxHQUNWO0lBQ0ksU0FBUyxFQUFFLFlBQVk7SUFDdkIsV0FBVyxFQUFFLE1BQU07SUFDbkIsYUFBYSxFQUFFLFFBQVE7SUFDdkIsYUFBYSxFQUFFLFFBQVE7SUFDdkIsT0FBTyxFQUFFLGtCQUFrQjtJQUMzQixTQUFTLEVBQUUscUJBQXFCO0lBQ2hDLFNBQVMsRUFBRSx5QkFBeUI7SUFDcEMsUUFBUSxFQUFFLHFDQUFxQztDQUNsRCxDQUFBO0FBRUQsc0VBQXNFO0FBRXRFLFNBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFDLElBQUksRUFBQyxVQUFTLEdBQUcsRUFBQyxFQUFFO0lBQzFDLElBQUcsR0FBRztRQUFFLE1BQU0sR0FBRyxDQUFDO0lBQ2xCLElBQUk7UUFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQ3REO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixrQkFBYSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsb0RBQW9ELEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDakc7QUFDRCxDQUFDLENBQUMsQ0FBQztBQUVILGNBQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsZ0NBQXNCLENBQUMsUUFBUSxDQUFD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